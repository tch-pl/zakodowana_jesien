# This is a sample Python script.
from tkinter import *
# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
from typing import Dict

red_points_data = "{L;1},{C1;1},{Ł;2},{B1;2}, {D1;2},{M;3},{Z;3}, {A1;3}, {E1;3},{N;4}, {X;4}, {Y;4}, {Z;4}, {E1;4},{O;5}, {W;5}, {X;5}, {Y;5}, {Z;5}, {E1;5},{P;6}, {W;6}, {E1;6}, {F1;6},{Q;7} , {T;7} , {U;7} , {E1;7}, {F1;7},{Q;8}, {S;8}, {E1;8}, {F1;8},{Q;9}, {S;9}, {D1;9}, {E1;9}, {F1;9},{Q;10}, {S;10}, {D1;10}, {E1;10}, {F1;10}, {Q;11}, {R;11}, {S;11}, {F1;11}, {G1;11}, {F1;12}, {G1;12},{F1;13},{E1;14},{E1;15},{E1;16},{E1;17}, {H1;17}, {I1;17}, {J1;17},  {K1;17},  {L1;17}, {Ł1;17},{E1;18}, {F1;18}, {G1;18}, {M1;18}, {N1;18}, {O1;18}, {P1;18}, {Q1;18},{P1;19},{O1;20},{N1;21},{M1;22},{M1;23},{Ł1;24},{Ł1;25},{L1;26},{J1;27}, {K1;27},{I1;28}"
black_points_data = "{C1 ;3},{Ł;4}, {C1;4},{K;5}, {Ł;5}, {N;5}, {B1;5},{L;6}, {Ł;6}, {M;6}, {B1;6},{Ł;7}, {B1;7},{Ł;8},  {P;8},  {X;8},  {B1;8},{J;9}, {Ł;9}, {O;9}, {X;9}, {A1;9},{K;10}, {Ł;10}, {N;10}, {X;10}, {A1;10},{L;11}, {Ł;11}, {M;11}, {X;11}, {Z;11},{Ł;12}, {X;12}, {Z;12},{I;13}, {Ł;13}, {P;13}, {S;13}, {X;13}, {Y;13},{J;14}, {O;14}, {S;14}, {X;14}, {Y;14}, {Z;14}, {A1;14}, {B1;14}, {C1;14}, {D1;14},{K;15}, {N;15}, {S;15}, {X;15},{L;16}, {Ł;16}, {M;16}, {S;16}, {X;16},{Ł;17}, {Q;17}, {S;17}, {W;17},{I;18}, {Ł;18}, {P;18}, {S;18}, {W;18},{J;19}, {Ł;19}, {O;19}, {S;19}, {U;19},{K;20}, {Ł;20}, {N;20}, {S;20}, {U;20}, {I1;20}, {Ł1;20},{L;21}, {Ł;21}, {M;21}, {S;21}, {U;21}, {I1;21}, {L1;21},{Ł;22}, {S;22}, {T;22}, {U;22}, {W;22}, {X;22}, {Y;22}, {Z;22}, {A1;22}, {B1;22}, {I1;22}, {J1;22},{Ł;23}, {S;23}, {T;23}, {I1;23}, {J1;23},{Ł;24}, {S;24}, {C1;24}, {H1;24}, {I1;24}, {J1;24}, {K1;24}, {L1;24},{Ł;25}, {R;25}, {S;25}, {C1;25}, {G1;25},{Ł1;26}, {Q;26}, {R;26}, {C1;26}, {E1;26}, {F1;26},{Ł;27}, {P;27}, {Q;27}, {C1;27}, {D1;27},{M;28}, {O;28}, {P;28}, {A1;28}, {B1;28}, {C1;28}, {D1;28}, {E1;28}, {F1;28}, {G1;28},{N;29}, {O;29}, {X;29}, {Y;29}, {Z;29},{N;30}, {P;30}, {Q;30}, {R;30}, {S;30}, {T;30}, {U;30}, {W;30},{M;31},{Ł;32},{L;33},{K;34}"
brown_points_data = "{G;11}, {H;11},{G;12},{G;13},{G;14},{H;15},{H;16},{B;17}, {C;17}, {D;17}, {E;17}, {F;17}, {G;17}, {H;17},{B;18},{C;19}, {D;19},{D;20},{D;21}, {E;21},{D;22}, {E;22}, {F;22},{E;23}, {F;23},{E;24}, {F;24}, {G;24},{F;25}, {G;25}, {H;25},{F;26}, {G;26}, {H;26}, {I;26},{I;27}, {J;27},{I;28},  {J;28}"
green_points_data = "{H;12}, {P;12}, {Q;12}, {S;12},{J;13}, {O;13}, {R;13}, {T;13},{I;14}, {K;14}, {N;14}, {P;14}, {R;14}, {T;14},{J;15}, {L;15}, {M;15}, {O;15}, {R;15}, {T;15},{K;16}, {N;16}, {R;16}, {T;16},{L;17}, {M;17}, {P;17}, {R;17}, {T;17},{J;18}, {L;18}, {M;18}, {O;18}, {Q;18}, {R;18}, {T;18},{I;19}, {K;19}, {L;19}, {M;19}, {N;19}, {P;19}, {R;19}, {T;19},{J;20}, {L;20}, {M;20}, {O;20}, {R;20}, {T;20},{K;21}, {N;21}, {R;21}, {T;21}, {W;21}, {X;21}, {Y;21}, {Z;21}, {A1;21}, {B1;21}, {C1;21},{L;22}, {M;22}, {R;22}, {C1;22},{L;23}, {M;23}, {R;23}, {U;23}, {W;23}, {X;23}, {Y;23}, {Z;23}, {A1;23}, {B1;23}, {C1;23}, {D1;23},{L;24}, {M;24}, {Q;24}, {R;24}, {T;24}, {B1;24}, {D1;24},{L;25}, {M;25}, {P;25}, {Q;25}, {T;25}, {B1;25}, {D1;25},{L;26}, {M;26}, {O;26}, {P;26}, {S;26}, {B1;26}, {D1;26},{L;27}, {M;27}, {N;27}, {O;27}, {R;27}, {Z;27}, {A1;27}, {B1;27}, {E1;27}, {F1;27}, {G1;27},{Ł;28}, {N;28}, {Q;28}, {W;28}, {X;28}, {Y;28}, {Z;28}, {H1;28},{P;29}, {Q;29}, {R;29}, {S;29}, {T;29}, {U;29}, {W;29}, {A1;29}, {B1;29}, {C1;29}, {D1;29}, {E1;29}, {F1;29}, {G1;29}, {H1;29},{X;30}, {Y;30}, {Z;30}, {A1;30},{Q;31}, {R;31}, {S;31}, {T;31}, {U;31}, {W;31}, {X;31}"
orange_points_data = "{L;2}, {C1;2},{L;3}, {Ł;3}, {B1;3}, {D1;3},{K;4}, {L;4}, {M;4}, {A1;4}, {B1;4}, {D1;4},{J;5}, {L;5}, {M;5}, {A1;5}, {C1;5}, {D1;5},{J;6}, {K;6}, {N;6}, {O;6}, {X;6}, {Y;6}, {Z;6}, {A1;6}, {C1;6}, {D1;6},{I;7}, {J;7}, {K;7}, {L;7}, {M;7}, {N;7}, {O;7}, {P;7}, {W;7}, {X;7}, {Y;7}, {Z;7}, {A1;7}, {C1;7}, {D1;7},{I;8}, {J;8}, {K;8}, {L;8}, {M;8}, {N;8}, {O;8}, {T;8}, {U;8}, {W;8}, {Y;8}, {Z;8}, {A1;8}, {C1;8}, {D1;8},{I;9}, {K;9}, {L;9}, {M;9}, {N;9}, {P;9}, {T;9}, {U;9}, {W;9}, {Y;9}, {Z;9}, {B1;9}, {C1;9},{I;10}, {J;10}, {L;10}, {M;10}, {O;10}, {P;10}, {T;10}, {U;10}, {W;10}, {Y;10}, {Z;10}, {B1;10}, {C1;10},{I;11}, {J;11}, {K;11}, {N;11}, {O;11}, {P;11}, {T;11}, {U;11}, {W;11}, {Y;11}, {A1;11}, {B1;11}, {C1;11}, {D1;11}, {E1;11},{I;12}, {J;12}, {K;12}, {L;12}, {M;12}, {N;12}, {O;12}, {R;12}, {T;12}, {U;12}, {W;12}, {Y;12}, {A1;12}, {B1;12}, {C1;12}, {D1;12}, {E1;12},{H;13}, {K;13}, {L;13}, {M;13}, {N;13},  {Q;13}, {U;13}, {W;13}, {Z;13}, {A1;13}, {B1;13}, {C1;13}, {D1;13}, {E1;13},{H;14}, {L;14}, {M;14}, {Q;14}, {U;14}, {W;14},{I;15}, {P;15}, {Q;15}, {U;15}, {W;15}, {Y;15}, {Z;15}, {A1;15}, {B1;15}, {C1;15}, {D1;15},{I;16}, {J;16}, {O;16}, {P;16}, {Q;16}, {U;16}, {W;16}, {Y;16}, {Z;16}, {A1;16}, {B1;16}, {C1;16}, {D1;16},{I;17}, {J;17}, {K;17}, {N;17}, {O;17}, {U;17}, {X;17}, {Y;17}, {Z;17}, {A1;17}, {B1;17}, {C1;17}, {D1;17},{C;18}, {D;18}, {E;18}, {F;18}, {G;18}, {H;18}, {K;18}, {N;18}, {U;18}, {X;18}, {Y;18}, {Z;18}, {A1;18}, {B1;18}, {C1;18}, {D1;18}, {H1;18}, {I1;18}, {J1;18}, {K1;18}, {L1;18}, {Ł1;18},{E;19}, {F;19}, {G;19}, {H;19}, {Q;19}, {W;19}, {X;19}, {Y;19}, {Z;19}, {A1;19}, {B1;19}, {C1;19}, {D1;19}, {E1;19}, {F1;19}, {G1;19}, {H1;19}, {I1;19}, {J1;19}, {K1;19}, {L1;19}, {Ł1;19}, {N1;19}, {O1;19},{E;20}, {F;20}, {G;20}, {H;20}, {I;20}, {P;20}, {Q;20}, {W;20}, {X;20}, {Y;20}, {Z;20}, {A1;20}, {B1;20}, {C1;20}, {D1;20}, {E1;20}, {F1;20}, {G1;20}, {H1;20}, {J1;20}, {K1;20}, {L1;20}, {M1;20}, {N1;20},{F;21}, {G;21}, {H;21}, {I;21}, {J;21}, {O;21}, {P;21}, {Q;21}, {D1;21}, {E1;21}, {F1;21}, {G1;21}, {H1;21}, {J1;21}, {K1;21}, {Ł1;21}, {M1;21},{G;22}, {H;22}, {I;22}, {J;22}, {K;22}, {N;22}, {O;22}, {P;22}, {Q;22}, {D1;22}, {E1;22}, {F1;22}, {G1;22}, {H1;22}, {K1;22}, {L1;22}, {Ł1;22},{G;23}, {H;23}, {I;23}, {J;23}, {K;23}, {N;23}, {O;23}, {P;23}, {Q;23}, {E1;23}, {F1;23}, {G1;23}, {H1;23}, {K1;23}, {L1;23}, {Ł1;23},{H;24}, {I;24}, {J;24}, {K;24}, {N;24}, {O;24}, {P;24}, {U;24}, {W;24}, {X;24}, {Y;24}, {Z;24}, {A1;24}, {E1;24}, {F1;24}, {G1;24},{I;25}, {J;25}, {K;25}, {N;25}, {O;25}, {U;25}, {W;25}, {X;25}, {Y;25}, {Z;25}, {A1;25}, {E1;25}, {F1;25}, {H1;25}, {I1;25}, {J1;25}, {K1;25}, {L1;25},{K;26}, {N;26}, {T;26}, {U;26}, {W;26}, {X;26}, {Y;26}, {Z;26}, {A1;26}, {G1;26}, {H1;26}, {I1;26}, {J1;26}, {K1;26},{K;27}, {S;27}, {T;27}, {U;27}, {W;27}, {X;27}, {Y;27}, {H1;27}, {I1;27},{K;28}, {L;28}, {R;28}, {S;28}, {T;28}, {U;28},{K;29}, {L;29}, {Ł;29}, {M;29},{F1;30}, {G1;30}, {H1;30},{F1;31}"
yellow_points_data = "{B1;30}, {C1;30}, {D1;30}, {E1;30},{Y;31}, {Z;31}, {A1;31}, {B1;31}, {C1;31}, {D1;31}, {E1;31},{R;32}, {S;32}, {T;32}, {U;32}, {W;32}, {X;32}, {Y;32}, {Z;32}, {A1;32}, {B1;32},{S;33}, {T;33}, {U;33}, {W;33}, {X;33}, {Y;33}, {Z;33}, {A1;33}, {B1;33},{W;34}, {X;34}, {Y;34}"

points_data: dict[str, str] = {"red": red_points_data, "black": black_points_data, "brown": brown_points_data,
                               "green": green_points_data,
                               "orange": orange_points_data, "yellow": yellow_points_data}

column_names_in_order= ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "Ł", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "W", "X", "Y", "Z", "A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1", "K1", "L1", "Ł1", "M1", "N1", "O1", "P1", "Q1", "R1", "S1", "T1"]

point_to_color = {}

def x_dimension(column_name):
    return column_names_in_order.index(column_name)+1

def findDuplicates():
    for color, color_points_data in points_data.items():
        for point_of_colour in getPoints(color_points_data):
            if (point_of_colour in point_to_color.keys()):
                print("Procesing Color [" + color + "] point [" + point_of_colour + "] already exists for color: " + point_to_color.get(point_of_colour))
            else:
                point_to_color[point_of_colour] = color

def getPoints(data):
    return data.replace(", ",",").split(",")

def getPointX(data):
    return x_dimension(data.replace("{","").replace("}","").replace(" ","").split(";")[0])

def getPointY(data):
    return int(data.replace("{","").replace("}","").replace(" ","").split(";")[1])+1

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    root = Tk()
    root.title("Practice with Grid")
    print(str(len(column_names_in_order)))
    root.geometry( str(len(column_names_in_order) *10)+"x980")  # set starting size of window
    findDuplicates()
    for point in point_to_color.keys():
        label = Label(root, text=" ",  bg=point_to_color.get(point) , width=3, height=1)
        label.grid(row=getPointY(point)+1, column=getPointX(point)+1)
    root.mainloop()
